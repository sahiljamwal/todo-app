{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","todoValue","id","Date","now","value","isCompleted","this","push","setState","updatedList","filter","item","input","src","logo","width","className","type","placeholder","required","onChange","e","updateInput","target","onClick","addItem","disabled","length","map","key","name","checked","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,8MC0G5BC,G,wDApGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJS,E,oDAQXC,GACN,GAAkB,KAAdA,EAAkB,CACpB,IAAMF,EAAU,CACdG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,aAAa,GAETN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GAEVQ,KAAKE,SAAS,CACZT,OACAD,QAAS,Q,iCAKJG,GACT,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACHW,QAAO,SAACC,GAC/B,OAAOA,EAAKV,KAAOA,KAErBK,KAAKE,SAAS,CACZT,KAAMU,M,kCAIEG,GACVN,KAAKE,SAAS,CACZV,QAASc,M,+BAIH,IAAD,OACP,OACE,6BACE,gCACE,yBAAKC,IAAKC,IAAMC,MAAM,MAAMC,UAAU,SACtC,wBAAIA,UAAU,aAAd,kBACA,yBAAKA,UAAU,aAAf,iBAEE,6BACA,2BACEC,KAAK,OACLC,YAAY,gBACZF,UAAU,aACVG,UAAQ,EACRf,MAAOE,KAAKT,MAAMC,QAClBsB,SAAU,SAAAC,GAAO,EAAKC,YAAYD,EAAEE,OAAOnB,UAI7C,4BACEY,UAAU,UACVQ,QAAS,WAAQ,EAAKC,QAAQ,EAAK5B,MAAMC,UACzC4B,UAAWpB,KAAKT,MAAMC,QAAQ6B,QAHhC,YAKA,yBAAKX,UAAU,QACb,4BAEIV,KAAKT,MAAME,KAAK6B,KAAI,SAACjB,GACnB,OACE,wBAAIkB,IAAKlB,EAAKV,IACZ,2BACEgB,KAAK,WACLa,KAAK,WACLC,QAASpB,EAAKN,YACde,SAAU,eACXT,EAAKP,MACN,4BACEY,UAAU,MACVQ,QAAS,kBAAM,EAAKQ,WAAWrB,EAAKV,MAFtC,uB,GA/ENgC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a1838b6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: '',\n      list: []\n    };\n  }\n\n  addItem(todoValue) {\n    if (todoValue !== '') {\n      const newItem = {\n        id: Date.now(),\n        value: todoValue,\n        isCompleted: false\n      };\n      const list = [...this.state.list];\n      list.push(newItem);\n\n      this.setState({\n        list,\n        newItem: ''\n      });\n    }\n  }\n\n  deleteItem(id) {\n    const list = [...this.state.list];\n    const updatedList = list.filter((item) => {\n      return item.id !== id;\n    })\n    this.setState({\n      list: updatedList\n    })\n  }\n\n  updateInput(input) {\n    this.setState({\n      newItem: input\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <img src={logo} width='100' className=\"logo\" />\n          <h1 className='app-title'>To Do List App</h1>\n          <div className='container'>\n            Add an Item...\n            <br />\n            <input\n              type='text'\n              placeholder='add todo item'\n              className='input-text'\n              required\n              value={this.state.newItem}\n              onChange={e => { this.updateInput(e.target.value) }}\n              \n\n            />\n            <button\n              className='add-btn'\n              onClick={() => { this.addItem(this.state.newItem) }}\n              disabled={!this.state.newItem.length}\n            >Add Todo</button>\n            <div className='list'>\n              <ul>\n                {\n                  this.state.list.map((item) => {\n                    return (\n                      <li key={item.id}>\n                        <input\n                          type='checkbox'\n                          name='toDoItem'\n                          checked={item.isCompleted}\n                          onChange={() => {  }} />\n                        {item.value}\n                        <button\n                          className='btn'\n                          onClick={() => this.deleteItem(item.id)}\n                        >Delete</button>\n                      </li>\n                    );\n                  })\n                }\n\n              </ul>\n            </div>\n          </div>\n        </header>\n\n      </div>\n    );\n  }\n\n\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}